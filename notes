#include "common.hpp"

#define TESTED_TYPE foo<int>

template <typename Ite_1, typename Ite_2>
void ft_eq_ope(const Ite_1 &first, const Ite_2 &second, const bool redo = 1)
{
	std::cout << (first < second) << std::endl;
	std::cout << (first <= second) << std::endl;
	std::cout << (first > second) << std::endl;
	std::cout << (first >= second) << std::endl;
	if (redo)
		ft_eq_ope(second, first, 0);
}

int		main(void)
{
	const int size = 5;
	TESTED_NAMESPACE::vector<TESTED_TYPE> vct(size);
	TESTED_NAMESPACE::vector<TESTED_TYPE>::reverse_iterator it_0(vct.rbegin());
	TESTED_NAMESPACE::vector<TESTED_TYPE>::reverse_iterator it_1(vct.rend());
	TESTED_NAMESPACE::vector<TESTED_TYPE>::reverse_iterator it_mid;

	TESTED_NAMESPACE::vector<TESTED_TYPE>::const_reverse_iterator cit_0 = vct.rbegin();
	TESTED_NAMESPACE::vector<TESTED_TYPE>::const_reverse_iterator cit_1;
	TESTED_NAMESPACE::vector<TESTED_TYPE>::const_reverse_iterator cit_mid;

	for (int i = size; it_0 != it_1; --i)
		*it_0++ = i;
	printSize(vct, 1);
	it_0 = vct.rbegin();
	cit_1 = vct.rend();
	it_mid = it_0 + 3;
	cit_mid = it_0 + 3; cit_mid = cit_0 + 3; cit_mid = it_mid;

	std::cout << "it_0 : " << *it_0 <<std::endl;
	std::cout << "it_1 : " << -1 <<std::endl;
	std::cout << "it_mid : " << *it_mid <<std::endl;
	std::cout << "cit_0 : " << *cit_0 <<std::endl;
	std::cout << "cit_1 : " << -1 <<std::endl;
	std::cout << "cit_mid : " << *cit_mid <<std::endl;

	int Pit_0 = 5;
	int Pit_1 =  -1;
	int Pit_mid = 2;
	int Pcit_0 = 5;
	int Pcit_1 = -1;
	int Pcit_mid = 2;

	std::cout << std::boolalpha;
	std::cout << ((it_0 + 3 == cit_0 + 3) && (cit_0 + 3 == it_mid)) << std::endl;

	std::cout << "\t\tft_eq_ope:" << std::endl;
	// regular it
	// std::cout << "\t\t it_0 + 3, it_mid:" << std::endl;
	// ft_eq_ope(it_0 + 3, it_mid);
	std::cout << "\t\t it_0, it_1: " << Pit_0 << " / " << Pit_1 << std::endl;
	ft_eq_ope(it_0, it_1);
	std::cout << "\t\t: it_1 - 3, it_mid " << Pit_1 - 3 << " / " << Pit_mid << std::endl;
	ft_eq_ope(it_1 - 3, it_mid);
	// const it
	// std::cout << "\t\t: cit_0 + 3, cit_mid" << std::endl;
	// ft_eq_ope(cit_0 + 3, cit_mid);
	std::cout << "\t\t cit_0, cit_1: " << Pcit_0 << " / " << Pcit_1 << std::endl;
	ft_eq_ope(cit_0, cit_1);
	std::cout << "\t\t cit_1 - 3, cit_mid: " << Pcit_1 - 3 << " / " << Pcit_mid << std::endl;
	ft_eq_ope(cit_1 - 3, cit_mid);
	// both it
	// std::cout << "\t\t it_0 + 3, cit_mid:" << std::endl;
	// ft_eq_ope(it_0 + 3, cit_mid);
	// std::cout << "\t\t it_mid, cit_0 + 3:" << std::endl;
	// ft_eq_ope(it_mid, cit_0 + 3);
	std::cout << "\t\t it_0, cit_1:" << std::endl;
	ft_eq_ope(it_0, cit_1);
	std::cout << "\t\t it_1, cit_0:" << std::endl;
	ft_eq_ope(it_1, cit_0);
	std::cout << "\t\t it_1 - 3, cit_mid:" << std::endl;
	ft_eq_ope(it_1 - 3, cit_mid);
	std::cout << "\t\t it_mid, cit_1 - 3:" << std::endl;
	ft_eq_ope(it_mid, cit_1 - 3);

	return (0);
}